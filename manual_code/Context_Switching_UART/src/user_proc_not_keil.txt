// Process 1: Quits upon receiving the keyboard shortcut registered
void proc1(void){
	int sender_id;
	MSG_BUF *p_msg_env;
	
	printf("Entering process 1\r\n");
	
	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env->mtype = KCD_REG;
	p_msg_env->mtext[0] = '%';
	p_msg_env->mtext[1] = 'A';
	p_msg_env->mtext[2] = '\0';
	send_message(PID_KCD,(void *)p_msg_env);
	printf("Process 1 sends %%A KCD_REG\r\n");
	
	p_msg_env = (MSG_BUF *)receive_message(&sender_id);
	printf("PROC 2 Test result: %s from process %d\r\n", p_msg_env->mtext, sender_id);
	release_memory_block(p_msg_env);
	
	printTest(1, 1);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}

// Process 2: Registers a command, will exit when it gets the right arguments
void proc2(void){
	int sender_id;
	MSG_BUF *p_msg_env;
	
	printf("Entering process 2\r\n");
	
	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env->mtype = KCD_REG;
	p_msg_env->mtext[0] = '%';
	p_msg_env->mtext[1] = 'B';
	p_msg_env->mtext[2] = '\0';
	send_message(PID_KCD,(void *)p_msg_env);
	printf("Process 2 sends %%B KCD_REG\r\n");

	while(1) {
		p_msg_env = (MSG_BUF *)receive_message(&sender_id);
		if(p_msg_env -> mtext[3] == 'Y' && p_msg_env -> mtext[4] == '\0') {
			break;
		}
	}
	
	printTest(2, 1);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}

// Process 3: Start up a wall clock, and then stop it later myself
void proc5(void){
	int sender_id;
	int correct_sender = 0;
	MSG_BUF *p_msg_env;
	
	printf("Entering process 3\r\n");
	
	// Start up the wall clock at a time which will wrap around
	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env->mtype = DEFAULT;
	p_msg_env->mtext[0] = '%';
	p_msg_env->mtext[1] = 'W';
	p_msg_env->mtext[2] = 'S';
	p_msg_env->mtext[3] = ' ';
	p_msg_env->mtext[4] = '2';
	p_msg_env->mtext[5] = '3';
	p_msg_env->mtext[6] = ':';
	p_msg_env->mtext[7] = '5';
	p_msg_env->mtext[8] = '9';
	p_msg_env->mtext[9] = ':';
	p_msg_env->mtext[10] = '5';
	p_msg_env->mtext[11] = '4';
	p_msg_env->mtext[12] = '\0';
	send_message(PID_KCD,(void *)p_msg_env);
	
	// Send a delayed message to myself to stop the wall clock in a minute
	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env = p_msg_env->mtext[0] = '1';
	p_msg_env = p_msg_env->mtext[1] = '\0';
	delayed_send(PID_P3,(void *)p_msg_env, 60000);
	
	// Wait until I receive the message from myself
	while(1) {
		p_msg_env = (MSG_BUF *)receive_message(&sender_id);
		correct_sender = sender_id == PID_P3;
		release_memory_block((void *)p_msg_env);
		
		// Kill the wall clock
		if(correct_sender == 1) {
			p_msg_env = (MSG_BUF *) request_memory_block();
			p_msg_env->mtype = DEFAULT;
			p_msg_env->mtext[0] = '%';
			p_msg_env->mtext[1] = 'W';
			p_msg_env->mtext[2] = 'T';
			p_msg_env->mtext[3] = '\0';
			send_message(PID_KCD,(void *)p_msg_env);
			break;
		}
	}
	
	printTest(3, 1);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}

// Process 4: Always ready to bar entry into procs 5 and 6
void proc4(void){
	printf("Entering process 4\r\n");
	while(1) {
		if(testsRun == 3) {
			break;
		}
	}
	
	printTest(4, 1);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}

// Process 5: 
void proc5(void){
	int sender_id;
	MSG_BUF *p_msg_env;
	
	printf("Entering process 5\r\n");
	
	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env->mtype = KCD_REG;
	p_msg_env->mtext[0] = '%';
	p_msg_env->mtext[1] = 'R';
	p_msg_env->mtext[2] = 'E';
	p_msg_env->mtext[3] = 'L';
	p_msg_env->mtext[4] = '\0';
	send_message(PID_KCD,(void *)p_msg_env);
	printf("Process 5 sends %%REL KCD_REG\r\n");
	
	for(i = 0; i < 29; i++) {
		all_memory_blocks[i] = request_memory_block();
	}

	p_msg_env = (MSG_BUF *) request_memory_block();
	p_msg_env = p_msg_env->mtext[0] = '1';
	p_msg_env = p_msg_env->mtext[1] = '\0';
	delayed_send(PID_P5,(void *)p_msg_env, 10000);
	
	p_msg_env = (MSG_BUF *)receive_message(&sender_id);
	release_memory_block((void *)p_msg_env);
	for(i = 0; i < 29; i++) {
		status &= (release_memory_block(all_memory_blocks[i]) == RTX_OK) ? 1 : 0;
	}
	
	printTest(5, 1);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}

// Process 6: Get blocked on memory, once unblocked immediately release
void proc6(void){
	int status;
	void *testBlock;
	
	printf("Entering process 6\r\n");
	testBlock = request_memory_block();
	status = release_memory_block(testBlock);
	
	status = status == RTX_OK ? 1 : 0;
	printTest(3, status);
	checkTestEnd();
	set_process_priority(gp_current_process->m_pid, LOWEST);
	while(1) {
		release_processor();
	}
}